# Bring in deps
import os

import streamlit as st
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from langchain.utilities import WikipediaAPIWrapper
import openai
from diffusers import StableDiffusionPipeline
import torch
import environ

env = environ.Env()
environ.Env.read_env()

API_KEY = env("apikey")

os.environ['OPENAI_API_KEY'] = API_KEY

# App framework
st.title('ðŸ¦œðŸ”— Detailed Story Generator')
prompt = st.text_input('Write details on the characters')
prompt1 = st.text_input('Write movie reference')

# Prompt templates
character_template = PromptTemplate(
    input_variables = ['topic'],
    template='write me a story title about {topic}'
)

theme_template = PromptTemplate(
    input_variables = ['title', 'imdb_search'],
    template='You are a story writer for kids. Write me a story theme based on this title: {title} while leveraging this imdb search: {imdb_search} '
)

# Memory
character_memory = ConversationBufferMemory(input_key='topic', memory_key='chat_history')
theme_memory = ConversationBufferMemory(input_key='title', memory_key='chat_history')


# Llms
llm = OpenAI(temperature=0.9)
character_chain = LLMChain(llm=llm, prompt=character_template, verbose=True, output_key='title', memory=character_memory)
theme_chain = LLMChain(llm=llm, prompt=theme_template, verbose=True, output_key='script', memory=theme_memory)

imdb = WikipediaAPIWrapper()

# Show stuff to the screen if there's a prompt
if prompt:
    title = character_chain.run(prompt)
    imdb_search = imdb.run(prompt1)
    theme = theme_chain.run(title=title, imdb_search=imdb_search)

    st.write(title)
    st.write(theme)

    with st.expander('Character History'):
        st.info(character_memory.buffer)

    with st.expander('Theme History'):
        st.info(theme_memory.buffer)

    with st.expander('IMDB Search'):
        st.info(imdb_search)


#function to generate AI based images using OpenAI Dall-E
def generate_images_using_openai(text):
    response = openai.Image.create(prompt= text, n=1, size="512x512")
    image_url = response['data'][0]['url']
    return image_url


#function to generate AI based images using Huggingface Diffusers
def generate_images_using_huggingface_diffusers(text):
    pipe = StableDiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5", torch_dtype=torch.float16)
    pipe = pipe.to("cuda")
    prompt3 = text
    image = pipe(prompt3).images[0]
    return image

#Streamlit Code
choice = st.sidebar.selectbox("Select your choice", ["Home", "DALL-E", "Huggingface Diffusers"])

if choice == "Home":
    st.title("AI Image Generation App")
    with st.expander("About the App"):
        st.write("This is a simple image generation app that uses AI to generates images from text prompt.")


elif choice == "DALL-E":
    st.subheader("Image generation using Open AI's DALL-E")
    input_prompt = st.text_input("Enter your text prompt")
    if input_prompt is not None:
        if st.button("Generate Image"):
            image_url = generate_images_using_openai(input_prompt)
            st.image(image_url, caption="Generated by DALL-E")


elif choice == "Huggingface Diffusers":
    st.subheader("Image generation using Huggingface Diffusers")
    input_prompt = st.text_input("Enter your text prompt")
    if input_prompt is not None:
        if st.button("Generate Image"):
            image_output = generate_images_using_huggingface_diffusers(input_prompt)
            st.info("Generating image.....")
            st.success("Image Generated Successfully")
            st.image(image_output, caption="Generated by Huggingface Diffusers")